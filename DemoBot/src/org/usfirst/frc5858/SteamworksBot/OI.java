// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5858.SteamworksBot;

import org.usfirst.frc5858.SteamworksBot.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    Joystick joystick = new Joystick(0);
    JoystickButton openButton = new JoystickButton(joystick, 3);
    JoystickButton closeButton = new JoystickButton(joystick,4);
	
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS



        // SmartDashboard Buttons
        SmartDashboard.putData("CloseGearbasket", new CloseGearbasket());
        SmartDashboard.putData("OpenGearbasket", new OpenGearbasket());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        //SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("TurnToAngle", new TurnToAngle());
        SmartDashboard.putData("CameraLeft", new CameraLeft());
        SmartDashboard.putData("CameraRight", new CameraRight());
        SmartDashboard.putData("CameraUp", new CameraUp());
        SmartDashboard.putData("CameraDown", new CameraDown());
        SmartDashboard.putData("ShooterOn", new ShooterOn());
        SmartDashboard.putData("ShooterOff", new ShooterOff());
        SmartDashboard.putData("HopperOn", new HopperOn());
        SmartDashboard.putData("HopperOff", new HopperOff());
        SmartDashboard.putData("FloorOn", new FloorOn());
        SmartDashboard.putData("FloorOff", new FloorOff());
        SmartDashboard.putData("ClimbOn", new ClimbUp());
        SmartDashboard.putData("ClimbDown", new ClimbDown());

        
        //SmartDashboard.putData("LoanerMove", new LoanerMove());
        		
        		
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

