package org.usfirst.frc5858.SteamworksBot.commands;

import org.usfirst.frc5858.SteamworksBot.Robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

public class CarmeraHatMove  extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CarmeraHatMove() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.visionCamera);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    private double lastX =0.0;
    private double lastY =0.0;
    private double lastPOV=0;
    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Joystick j = new Joystick(0);
    	int POV = j.getPOV();
    	if (POV == lastPOV) return;
    	lastPOV = POV;
    	
    	switch (POV)
    	{
    	case 0:
    		lastY = (lastY + 0.25);
    		if (lastY > 0.5) lastY = 0.5;
    		break;
    	case 180:
    		lastY = (lastY - 0.25);
    		if (lastY < -0.5) lastY = -0.5;
    		break;
    	
    	case 90:
    		lastX = (lastX + 0.25);
    		if (lastX > 0.5) lastX = 0.5;
    		break;
    	case 270:
    		lastX = (lastX - 0.25);
    		if (lastX < -0.5) lastX = -0.5;
    		break;
    	}
   
    	
    	Robot.visionCamera.set(lastX, lastY);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
