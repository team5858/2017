// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5858.SteamworksBot.subsystems;

import java.util.Arrays;

import org.usfirst.frc5858.SteamworksBot.RobotMap;
import org.usfirst.frc5858.SteamworksBot.commands.Drive;

//import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Drivetrain extends Subsystem {

    private final ADXRS450_Gyro robotGyro = RobotMap.drivetrainrobotGyro;
    //private final Encoder driveEncoder = RobotMap.drivetraindriveEncoder;
    private final RobotDrive LoanerDrive = RobotMap.loanerRobotDrive;
    private final AnalogInput ultrasonic = RobotMap.ultrasonic_Left;
    //private double previousspeed = 0;
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
    	setDefaultCommand(new Drive());
    }
    
    public void FieldCentricDrive(double x, double y, double rotation) {
    	LoanerDrive.mecanumDrive_Cartesian(x, y, rotation, GetAngle());
    }

    public void Drive(double x, double y, double rotation) {
    	LoanerDrive.mecanumDrive_Cartesian(-x, y, rotation, 0.0);
    	//if (previousspeed < 0.25)
    		
    }
    
    public void Stop() {
    	LoanerDrive.mecanumDrive_Cartesian(0, 0, 0, 0);	
    }
 
    public double GetAngle()
    {
    	double angle = robotGyro.getAngle() % 360.0;
    	if (angle < 0) angle += 360.0;
    	
    	SmartDashboard.putString("DB/String 3", "Gyro: " + angle);
    	return angle;
    } 
    
    double GetOverSampledRange() {
    	int number_of_samples = 64;
    	int throwaways_each_side = 16;
    	double[] samples = new double[number_of_samples];
    	for (int i = 0; i < number_of_samples; i++)
    	{
    		samples[i] = ultrasonic.getVoltage() / 0.0098;
    	}
    	Arrays.sort(samples);
    	double sum = 0;
    	for (int i = throwaways_each_side; i < number_of_samples - throwaways_each_side; i++)
    	{
    		sum += samples[i];
		}
    	return sum / (number_of_samples - (throwaways_each_side * 2));
    }
    
    public double GetRange(){
    	double range2 =  GetOverSampledRange();
    	SmartDashboard.putString("DB/String 4", "Range: " + (int) range2);
    	
    	//double range = ultrasonic.getVoltage() / 0.0098;
    	return range2;
    }
    
    public void SetSlow()
    {
    	LoanerDrive.setMaxOutput(0.3);
    }
        
    public void SetFast()
    {
    	LoanerDrive.setMaxOutput(1.0);
    }

    public void ResetGyro()
    {
    	RobotMap.drivetrainrobotGyro.calibrate();
    }

}


