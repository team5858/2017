// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5858.SteamworksBot.subsystems;

import java.io.IOException;

import org.usfirst.frc5858.SteamworksBot.RobotMap;
import org.usfirst.frc5858.SteamworksBot.VisionNetworking;
import org.usfirst.frc5858.SteamworksBot.commands.CameraPOV;

import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class VisionCamera extends Subsystem {
    private final Servo cameraServoX = RobotMap.visionCameracameraServoX;
    private final Servo cameraServoY = RobotMap.visionCameracameraServoY;
    VisionNetworking visionNetworking;
    
    int cameraDegreesX;
    int cameraDegreesY;
    
	final int HIGH_FUEL_TARGET=0;
	final int LOW_FUEL_TARGET=1;
	final int FUEL_ON_GROUND_TARGET=2;
	final int HOPPER_TARGET=3;
	final int ROPE_TARGET=4;
	final int GEAR_PIN_TARGET=5;
	final int FEEDER_TARGET=6;
    
    public VisionCamera()
    {
    	try
    	{
    	    visionNetworking = new VisionNetworking();
    	    visionNetworking.Handshake();
    	}
    	catch(IOException e)
    	{
    	}
    }


    public void initDefaultCommand() {
    	setDefaultCommand(new CameraPOV());
    }
        
    public void cameraLeft()
    {
    	setX(0.25);
    	
//    	if (cameraDegreesX == -45){
//    		return;
//    	} else if (cameraDegreesX == 0){
//    		cameraServoX.setAngle(-45);
//    	    cameraDegreesX=-45;
//    	} else {
//    		cameraServoX.setAngle(0);
//    		cameraDegreesX=0;
//    	}    	
    }
    
    // double x -.5(left) to .5(right) 
    public void setX(double x){
    	double cmd=x+0.5;
        cameraServoX.set(cmd);

    }

 // double y -.5(down) to .5(up)
    public void setY(double y){
    	double cmd=y+0.5;
        cameraServoY.set(cmd);

    }
    // double x -.5(left) to .5(right)
    public void set(double x, double y){
        setX(x);
        setY(y);
    }

    public void cameraUp()
    {
    	setY(0.25);
    	
//    	if (cameraDegreesY == -45) {
//    		return;
//    	} else if (cameraDegreesY == 0) {
//    		cameraServoY.setAngle(-45);
//    	    cameraDegreesY=-45;
//    	} else {
//    		cameraServoY.setAngle(0);
//    		cameraDegreesY=0;
//    	}    	
    }
    
    public void cameraRight()
    {
    	setX(-0.25);
    	
//    	if (cameraDegreesX == 45) {
//    		return;
//    	} else if (cameraDegreesX == 0) {
//    		cameraServoX.setAngle(45);
//    	    cameraDegreesX=45;
//    	} else {
//    		cameraServoX.setAngle(0);
//    		cameraDegreesX=0;
//    	}    	
    }
    
    public void cameraDown()
    {
    	setY(-0.25);
    	
//    	if (cameraDegreesY == 45) {
//    		return;
//    	} else if (cameraDegreesY == 0) {
//    		cameraServoY.setAngle(45);
//    	    cameraDegreesY=45;
//    	} else {
//    		cameraServoY.setAngle(0);
//    		cameraDegreesY=0;
//    	}    	
    }
    
    /*public void handShake() 
    {
    	try {
			visionNetworking.Handshake();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }*/
    
    public int getError() 
    {
    	//visionNetworking.Receive();
    	//visionNetworking.Update();
    	return visionNetworking.getError();
    }
    
    public int getConfidence()
    {
    	return visionNetworking.getConfidence();
    }
    
    public int getRange()
    {
    	return visionNetworking.getRange();
    }
    
    public void requestUpdates()
    {
    	
    }
    
    public void stopUpdates()
    {
    	
    }
    
    public void setTarget(int targetMode)
    {
    	visionNetworking.setTarget(targetMode);
    }
    
    public void DisplayUpdate()
    {
    	visionNetworking.DisplayUpdate();
    }
}



