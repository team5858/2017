// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5858.SteamworksBot.subsystems;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class BallShooter extends Subsystem { //extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //private final CANTalon wheelMotor1 = RobotMap.ballShooterwheelMotor1;
    //private final CANTalon wheelMotor2 = RobotMap.ballShooterwheelMotor2;
    //private final CANTalon kickMotor = RobotMap.kickerMotor;
    
    //private final Encoder wheelMonitor = RobotMap.BallShooterwheelMonitor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public BallShooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        //super("BallShooter", 1.0, 0.0, 0.0);
        //setAbsoluteTolerance(1.0);
        //getPIDController().setContinuous(false);
        //wheelMonitor.setPIDSourceType(PIDSourceType.kRate);
        
        //LiveWindow.addActuator("BallShooter", "PIDSubsystem Controller", getPIDController());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void setSpeed(double speed)
    {
    	//wheelMotor1.set(speed);
    	//wheelMotor2.set(-speed);
    }
    
    public void disable()
    {
    	//wheelMotor1.set(0);
    	//wheelMotor2.set(0);
    	//kickMotor.set(0);
    }
    
    public void kickOn()
    {
    	//kickMotor.set(-0.75);
    }
    
    public void kickOff()
    {
    	//kickMotor.set(0.0);
    }
    
    /*
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return wheelMonitor.pidGet();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        wheelMotor.pidWrite(output);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    public void turnOff() {
    	wheelMotor.set(0.0);
    }
    */
}
