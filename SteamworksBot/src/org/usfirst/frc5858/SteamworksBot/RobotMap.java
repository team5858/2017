// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5858.SteamworksBot;

import com.ctre.CANTalon;

//import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Talon;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// slightly loved on by Chris

	// CAN ID's:
	public static int frontLeft_CAN_id = 5;
	public static int frontRight_CAN_id = 7;
	//
	public static int backLeft_CAN_id = 1;
	public static int backRight_CAN_id = 6;
	//
	public static int climber1_CAN_id = 8;
	public static int climber2_CAN_id = 4;
	//
	//public static int floorConveyor_CAN_id = 3;
	//public static int kicker_CAN_id = 2;
	
	// PWM ID's:
	public static int gearBox_left_servo_id = 0;
	public static int gearBox_right_servo_id = 1;
	//
	public static int visionCamera_servoX_id = 4;
	public static int visionCamera_servoY_id = 5;
	//
	//public static int climber_motor1_id = 2;
	//public static int climber_motor2_id = 3;
	
	/*
	public static int gearBox_left_servo_id = 1;
	public static int gearBox_right_servo_id = 2;
	//
	public static int visionCamera_servoX_id = 3;
	public static int visionCamera_servoY_id = 4;
	//
	public static int climber_motor1_id = 5;
	public static int climber_motor2_id = 6;
	*/
	
	//
	public static int loaner_back_right_id = 5;
	public static int loaner_front_right_id = 6;
	public static int loaner_back_left_id = 7;
	public static int loaner_front_left_id = 8;

	// Digital IDs:
	public static int climberLimitSwitch_DIO_id = 1;
	//
	public static int ultrasonic_left_trigger_id = 2;
	public static int ultrasonic_rightt_trigger_id = 3;
	public static int ultrasonic_left_response_id = 4;
	public static int ultrasonic_right_response_id = 5;
	//
	public static int driveTrainEncoder_A_id = 5;
	public static int driveTrainEncoder_B_id = 7;
	//
	public static int ballShooterEncoder_A_id = 8;
	public static int ballShooterEncoder_B_id = 9;

	
	public static Talon loanerfrontLeft;
	public static Talon loanerfrontRight;
	public static Talon LoanerbackLeft;
	public static Talon loanerbackRight;
	public static RobotDrive loanerRobotDrive;

	public static CANTalon realRobotFrontLeft;
	public static CANTalon realRobotFrontRight;
	public static CANTalon realRobotBackLeft;
	public static CANTalon realRobotBackRight;
	//public static CANTalon kickerMotor;
	
	// we will come back and add the ultrasonics here later
	public static AnalogInput ultrasonic_Left;

	public static ADXRS450_Gyro drivetrainrobotGyro;
	public static Encoder drivetraindriveEncoder;
	// ^ this encoder may go away since it may get plugged direct into
	// TalonSRX (it can handle encoders itself and you just tell it
	// what rate to go to...)

	// Gear box:
	public static Servo gearBasketleftServo;
	public static Servo gearBasketrightServo;

	// Camera:
	public static Servo visionCameracameraServoX;
	public static Servo visionCameracameraServoY;

	// Shooter:
	//public static CANTalon ballShooterwheelMotor1;
	//public static CANTalon ballShooterwheelMotor2;

	// Hopper and floor conveyer:
	//public static CANTalon floorConveyerMotor;

	// Climber:
	public static CANTalon climberClimberMotor1;
	public static CANTalon climberClimberMotor2;
	// public static DigitalInput climberclimbLimiter;

	public static SmartDashboard dashboard;
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		dashboard = new SmartDashboard();
		
		DigitalInput isLoanerBot = new DigitalInput(2);
		
		//SmartDashboard.putString("DB/String 5", isLoanerBot.get() ? "ditrue" : "difalse");

		if (isLoanerBot.get() == false) {
			// loanerdrivetrain section
			loanerbackRight = new Talon(loaner_back_right_id);
			LiveWindow.addActuator("Drivetrain", "backRight", loanerbackRight);

			loanerfrontRight = new Talon(loaner_front_right_id);
			LiveWindow.addActuator("Drivetrain", "frontRight", loanerfrontRight);

			LoanerbackLeft = new Talon(loaner_back_left_id);
			LiveWindow.addActuator("Drivetrain", "backLeft", LoanerbackLeft);
			LoanerbackLeft.setInverted(true);

			loanerfrontLeft = new Talon(loaner_front_left_id);
			LiveWindow.addActuator("Drivetrain", "frontLeft", loanerfrontLeft);
			loanerfrontLeft.setInverted(true);

			loanerRobotDrive = new RobotDrive(loanerfrontLeft, LoanerbackLeft, loanerfrontRight, loanerbackRight);
		} else {
			climberClimberMotor1 = new CANTalon(climber1_CAN_id);
			climberClimberMotor2 = new CANTalon(climber2_CAN_id);

			realRobotFrontLeft = new CANTalon(frontLeft_CAN_id);
			//realRobotFrontLeft.setInverted(true);
			realRobotFrontRight = new CANTalon(frontRight_CAN_id);
			realRobotFrontRight.setInverted(true);
			realRobotBackRight = new CANTalon(backRight_CAN_id);
			realRobotBackRight.setInverted(true);
			realRobotBackLeft = new CANTalon(backLeft_CAN_id);
			//realRobotBackLeft.setInverted(true);
			
			realRobotBackLeft.enableBrakeMode(false);
			realRobotBackRight.enableBrakeMode(false);
			realRobotFrontLeft.enableBrakeMode(false);
			realRobotFrontRight.enableBrakeMode(false);
			
			
			loanerRobotDrive = new RobotDrive(realRobotFrontLeft, realRobotBackLeft, realRobotFrontRight,
					realRobotBackRight);
			
			//kickerMotor = new CANTalon(kicker_CAN_id);
		}

		loanerRobotDrive.setSafetyEnabled(true);
		loanerRobotDrive.setExpiration(0.1);
		loanerRobotDrive.setSensitivity(0.5);
	    //loanerRobotDrive.setMaxOutput(0.5);

		drivetrainrobotGyro = new ADXRS450_Gyro();
		LiveWindow.addSensor("Drivetrain", "robotGyro", drivetrainrobotGyro);
		// drivetrainrobotGyro.setSensitivity(0.007);

		drivetraindriveEncoder = new Encoder(driveTrainEncoder_A_id, driveTrainEncoder_B_id, false, EncodingType.k4X);
		drivetraindriveEncoder.setDistancePerPulse(1.0);
		drivetraindriveEncoder.setPIDSourceType(PIDSourceType.kRate);
		LiveWindow.addSensor("Drivetrain", "driveEncoder", drivetraindriveEncoder);

		gearBasketleftServo = new Servo(gearBox_left_servo_id);
		LiveWindow.addActuator("GearBasket", "leftServo", gearBasketleftServo);

		gearBasketrightServo = new Servo(gearBox_right_servo_id);
		LiveWindow.addActuator("GearBasket", "rightServo", gearBasketrightServo);

		visionCameracameraServoX = new Servo(visionCamera_servoX_id);
		LiveWindow.addActuator("VisionCamera", "cameraServoX", visionCameracameraServoX);

		visionCameracameraServoY = new Servo(visionCamera_servoY_id);
		LiveWindow.addActuator("VisionCamera", "cameraServoY", visionCameracameraServoY);
		
//		ballShooterwheelMotor1 = new CANTalon(climber1_CAN_id);
//		ballShooterwheelMotor2 = new CANTalon(climber2_CAN_id);
//		floorConveyerMotor = new CANTalon(floorConveyor_CAN_id);

		ultrasonic_Left = new AnalogInput(0);
		AnalogInput.setGlobalSampleRate(10000);

		drivetrainrobotGyro.calibrate();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
