// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5858.SteamworksBot; 

import org.usfirst.frc5858.SteamworksBot.commands.AutoDeliverGear;
import org.usfirst.frc5858.SteamworksBot.commands.AutoNearGear;
import org.usfirst.frc5858.SteamworksBot.commands.OpenGearbasket;
import org.usfirst.frc5858.SteamworksBot.subsystems.BallShooter;
import org.usfirst.frc5858.SteamworksBot.subsystems.Climber;
import org.usfirst.frc5858.SteamworksBot.subsystems.Drivetrain;
import org.usfirst.frc5858.SteamworksBot.subsystems.FloorConveyor;
import org.usfirst.frc5858.SteamworksBot.subsystems.GearBasket;
import org.usfirst.frc5858.SteamworksBot.subsystems.LEDDriver;
import org.usfirst.frc5858.SteamworksBot.subsystems.VisionCamera;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static BallShooter ballShooter;
    public static Climber climber;
    public static Drivetrain drivetrain;
    public static FloorConveyor floorConveyor;
    public static GearBasket gearBasket;
    //public static HopperConveyor hopperConveyor;
    public static LEDDriver oreo;
    public static VisionCamera visionCamera;
    
    public class Constants {
    	public static final double timeToClosePegSeconds = 2.0;
    	public static final double timeToFarPegSeconds = 4.0;
    	public static final double distanceToPeg = 15.0;
    	public static final double turnToPeg = 120.0;
    	public static final double scootTime = 0.50;
    	
    	public static final String strDriveStraight = "DriveStraight()";
    	public static final String strDeliverGear = "DeliverGear()";
    }
    
    //public static VisionCamera visionCamera;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ballShooter = new BallShooter();
    	climber = new Climber();
    	drivetrain = new Drivetrain();
    	floorConveyor = new FloorConveyor();
        gearBasket = new GearBasket();
        //hopperConveyor = new HopperConveyor();
        oreo = new LEDDriver();
        visionCamera = new VisionCamera();
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        //autonomousCommand = new AutonomousCommand()
    	//autonomousCommand = new AutoGearDelivery();
    	//autonomousCommand = new AutoGoToAngle(180);
        //autonomousCommand = new AutoNearGear();
        
        // CAMERA CODE HERE
        CameraServer server = CameraServer.getInstance();
        server.startAutomaticCapture("cam0", 0);
        
    	 String[] autonomousCommands = new String[2];
    	 autonomousCommands[0]  = Constants.strDriveStraight;
    	 autonomousCommands[1]  = Constants.strDeliverGear;
    	 RobotMap.dashboard.putStringArray("Auto List", autonomousCommands);
    	 
    	 String[] teamColors = {"Red", "Blue"};
    	 RobotMap.dashboard.putStringArray("Team Color", teamColors);
    			
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	SmartDashboard.putString("DB/String 9", "Debug one DISABLED.");
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }
    
    public void autonomousInit() {
        // schedule the autonomous command (example)
    	String autoModeSelected = SmartDashboard.getString("Auto Selector","");
    	
    	double pauseFirst = 2.0;
    	try {
    		SmartDashboard.getString("DB/Slider 1","");
    	} catch(Exception e) {}
    	
    	double driveTime = 2.0;
    	try {
    		SmartDashboard.getString("DB/Slider 2","");
    	} catch(Exception e) {}
    	
    	switch (autoModeSelected)
    	{
    	
    	case  Constants.strDriveStraight:
    		// Pause, drive up to gear, and stop
    		autonomousCommand = new AutoNearGear(pauseFirst, driveTime);    	
    		break;
    		
		case Constants.strDeliverGear:	
			// Pause, drive up to gear, and leave gear
			autonomousCommand = new AutoDeliverGear(pauseFirst, driveTime);
			break;
		}
    	
    	if (autonomousCommand != null) {
    		String teamColor = SmartDashboard.getString("Team Color","");
    		if(teamColor.equals("Red")) {
    			oreo.modeAutonomousRed();
    		} else {
    			oreo.modeAutonomousBlue();
    		}    		
    		autonomousCommand.start();
    	}
    }
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        oreo.modeTeleop();
        
        //visionCamera.setDefaultCommandRuntime();
        //visionCamera.handShake();
    }
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
    
    public void testInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        Command c = new OpenGearbasket();
        c.start();
    	autonomousCommand.cancel();
    	
    	Robot.drivetrain.ResetGyro();

        //visionCamera.setDefaultCommandRuntime();
        //visionCamera.handShake();
    }
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        Scheduler.getInstance().run();
    }
}
